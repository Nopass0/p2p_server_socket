// src/services/gate-monitoring.service.ts
import { BaseService } from "./base.service";
import db from "../db";
import axios, { AxiosError } from "axios";
import { ServiceMonitor } from "../utils/service-monitor";
import type { GateCookie } from "@prisma/client";
import { Prisma } from "@prisma/client"; // –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–∫–∏
import { TransactionMatchingService } from "./transaction-matching.service";

interface GatePayment {
  id: number;
  payment_method_id: number;
  wallet: string;
  amount: {
    trader: {
      "643": number;
      "000001": number;
    };
  };
  total: {
    trader: {
      "643": number;
      "000001": number;
    };
  };
  status: number;
  approved_at: string;
  expired_at: string;
  created_at: string;
  updated_at: string;
  meta: {
    courses: {
      trader: number;
    };
    reason: {
      trader: null | string;
      support: null | string;
    };
  };
  method: {
    id: number;
    type: number;
    name: number;
    label: string;
    status: number;
    payment_provider_id: number;
    wallet_currency_id: number;
  };
  attachments: {
    name: string;
    file_name: string;
    original_url: string;
    extension: string;
    size: number;
    created_at: string;
    custom_properties: {
      fake: boolean;
    };
  }[];
  tooltip: {
    payments: {
      success: number;
      rejected: number | null;
      percent: number;
    };
    reasons: any[];
  };
  bank: {
    id: number;
    name: string;
    code: string | number;
    label: string;
    meta: {
      system: string;
      country: string;
    };
  };
  trader: {
    id: number;
    name: string;
  };
}

export class GateMonitoringService extends BaseService {
  private readonly GATE_API_URL =
    "https://panel.gate.cx/api/v1/payments/payouts?filters%5Bstatus%5D%5B%5D=2&filters%5Bstatus%5D%5B%5D=3&filters%5Bstatus%5D%5B%5D=7&filters%5Bstatus%5D%5B%5D=8&filters%5Bstatus%5D%5B%5D=9&page=";
  private readonly GATE_USER_AGENT =
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36";
  
  // –°–µ—Ä–≤–∏—Å –º—ç—Ç—á–∏–Ω–≥–∞
  private matchingService: TransactionMatchingService;

  constructor(monitor: ServiceMonitor, matchingService: TransactionMatchingService) {
    super("GateMonitoringService", monitor);
    this.matchingService = matchingService;
  }

  private getCookieString(gateCookie: GateCookie): string {
    try {
      const parsed = JSON.parse(gateCookie.cookie);
      if (Array.isArray(parsed)) {
        return parsed.map((cookie: any) => `${cookie.name}=${cookie.value}`).join("; ");
      }
      return String(gateCookie.cookie);
    } catch (error) {
      return String(gateCookie.cookie);
    }
  }

  private async validateCookie(gateCookie: GateCookie): Promise<boolean> {
    try {
      const cookieString = this.getCookieString(gateCookie);
      const response = await axios.get(this.GATE_API_URL + 1, {
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          Cookie: cookieString,
          "User-Agent": this.GATE_USER_AGENT,
        },
      });
      const isValid =
        response.status === 200 &&
        Array.isArray(response.data?.response?.payouts?.data);
      await db.gateCookie.update({
        where: { id: gateCookie.id },
        data: {
          isActive: isValid,
          lastChecked: new Date(),
          updatedAt: new Date(),
        },
      });
      if (!isValid) {
        console.log(
          `‚ùå Cookie validation failed for user ${gateCookie.userId} (Cookie ID: ${gateCookie.id})`
        );
      }
      return isValid;
    } catch (error) {
      const isAuthError =
        error instanceof AxiosError && error.response?.status === 401;
      if (isAuthError) {
        console.log(
          `‚ùå Cookie expired for user ${gateCookie.userId} (Cookie ID: ${gateCookie.id})`
        );
      } else {
        console.error(
          `‚ùå Cookie validation error for user ${gateCookie.userId} (Cookie ID: ${gateCookie.id}):`,
          error
        );
      }
      await db.gateCookie.update({
        where: { id: gateCookie.id },
        data: {
          isActive: false,
          lastChecked: new Date(),
          updatedAt: new Date(),
        },
      });
      return false;
    }
  }

  private async fetchGateTransactions(
    gateCookie: GateCookie,
    page: number = 1,
  ): Promise<GatePayment[]> {
    try {
      const cookieString = this.getCookieString(gateCookie);
      const response = await axios.get(`${this.GATE_API_URL}${page}`, {
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          Cookie: cookieString,
          "User-Agent": this.GATE_USER_AGENT,
        },
      });
      return response.data?.response?.payouts?.data || [];
    } catch (error) {
      console.error(
        `‚ùå Error fetching Gate transactions for user ${gateCookie.userId} on page ${page}:`,
        error
      );
      return [];
    }
  }

  private async fetchAllGateTransactions(
    gateCookie: GateCookie,
  ): Promise<GatePayment[]> {
    const maxPages = 25;
    const allTransactions: GatePayment[] = [];
    for (let page = 1; page <= maxPages; page++) {
      const transactions = await this.fetchGateTransactions(gateCookie, page);
      if (transactions.length === 0) break;
      allTransactions.push(...transactions);
      await this.delay(500);
    }
    return allTransactions;
  }

  // processTransactions –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –æ–±—â–∏–º —á–∏—Å–ª–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  private async processTransactions(
    userId: number,
    transactions: GatePayment[],
    gateCookie: GateCookie,
  ): Promise<{ processed: number; total: number }> {
    let processedCount = 0;
    for (const transaction of transactions) {
      try {
        // –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ transactionId (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ userId)
        const existingTransaction = await db.gateTransaction.findFirst({
          where: {
            transactionId: String(transaction.id),
          },
        });
        console.log("üîç –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", transaction.id);
        if (!existingTransaction) {
          // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          try {
            await db.gateTransaction.create({
              data: {
                userId,
                transactionId: String(transaction.id),
                paymentMethodId: transaction.payment_method_id,
                wallet: transaction.wallet,
                amountRub: transaction.amount.trader["643"] || 0,
                amountUsdt: transaction.amount.trader["000001"] || 0,
                totalRub: transaction.total.trader["643"] || 0,
                totalUsdt: transaction.total.trader["000001"] || 0,
                status: transaction.status,
                bankName: transaction.bank?.name || null,
                bankCode: transaction.bank?.code?.toString() || null,
                bankLabel: transaction.bank?.label || null,
                paymentMethod: transaction.method?.label || null,
                course: transaction.meta?.courses?.trader || null,
                successCount: transaction.tooltip?.payments?.success || null,
                successRate: transaction.tooltip?.payments?.percent || null,
                approvedAt: transaction.approved_at ? new Date(transaction.approved_at) : null,
                expiredAt: transaction.expired_at ? new Date(transaction.expired_at) : null,
                createdAt: new Date(transaction.created_at),
                updatedAt: new Date(transaction.updated_at),
                traderId: transaction.trader?.id || null,
                traderName: transaction.trader?.name || null,
                attachments: transaction.attachments || null,
                idexId: String(transaction.trader?.id) || null,
              },
            });
            console.log(
              `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Gate: ${transaction.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`
            );
            processedCount++;
          } catch (error) {
            if (
              error instanceof Prisma.PrismaClientKnownRequestError &&
              error.code === "P2002"
            ) {
              console.log(`‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å id ${transaction.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
            } else {
              console.error(
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${transaction.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
                error
              );
            }
          }
        } else {
          // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º transactionId —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
          // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç.
          const createdAt = new Date(existingTransaction.createdAt);
          const now = new Date();
          const diffMs = now.getTime() - createdAt.getTime();
          if (diffMs > 5 * 60 * 1000) {
            // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤—è–∑–∏ –≤ TransactionMatch
            const existingMatch = await db.transactionMatch.findFirst({
              where: { gateTxId: existingTransaction.id },
            });
            if (existingMatch) {
              console.log(
                `‚ö†Ô∏è –î–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${transaction.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å–≤—è–∑—å –≤ TransactionMatch, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.`
              );
            } else {
              // –ï—Å–ª–∏ —Å–≤—è–∑–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–º –∂–µ transactionId
              try {
                await db.gateTransaction.create({
                  data: {
                    userId,
                    transactionId: String(transaction.id),
                    paymentMethodId: transaction.payment_method_id,
                    wallet: transaction.wallet,
                    amountRub: transaction.amount.trader["643"] || 0,
                    amountUsdt: transaction.amount.trader["000001"] || 0,
                    totalRub: transaction.total.trader["643"] || 0,
                    totalUsdt: transaction.total.trader["000001"] || 0,
                    status: transaction.status,
                    bankName: transaction.bank?.name || null,
                    bankCode: transaction.bank?.code?.toString() || null,
                    bankLabel: transaction.bank?.label || null,
                    paymentMethod: transaction.method?.label || null,
                    course: transaction.meta?.courses?.trader || null,
                    successCount: transaction.tooltip?.payments?.success || null,
                    successRate: transaction.tooltip?.payments?.percent || null,
                    approvedAt: transaction.approved_at ? new Date(transaction.approved_at) : null,
                    expiredAt: transaction.expired_at ? new Date(transaction.expired_at) : null,
                    createdAt: new Date(transaction.created_at),
                    updatedAt: new Date(transaction.updated_at),
                    traderId: transaction.trader?.id || null,
                    traderName: transaction.trader?.name || null,
                    attachments: transaction.attachments || null,
                    idexId: String(transaction.trader?.id) || null,
                  },
                });
                console.log(
                  `‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Gate —Å transactionId ${transaction.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`
                );
                processedCount++;
              } catch (error) {
                console.error(
                  `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${transaction.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
                  error
                );
              }
            }
          } else {
            console.log(
              `‚ÑπÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${transaction.id} —Å–æ–∑–¥–∞–Ω–∞ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`
            );
          }
        }
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${transaction.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
          error
        );
      }
    }
    return { processed: processedCount, total: transactions.length };
  }

  /**
   * –ú–µ—Ç–æ–¥ start() –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:
   *  - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ GateCookie (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –≥—Ä—É–∑—è—Ç—Å—è –≤—Å–µ Gate-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
   *  - –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
   *  - –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è matchingService.processUserTransactions(userId)
   *    –∏ —Å–µ—Ä–≤–∏—Å –∂–¥—ë—Ç –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
   *  - –ó–∞—Ç–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ 5 –º–∏–Ω—É—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
   */
  async start(): Promise<void> {
    if (this.isRunning) return;
    this.isRunning = true;
    this.updateServiceStats({ isRunning: true });

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–∫–∏ (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
    const gateCookies = await db.gateCookie.findMany({
      where: { isActive: true },
    });

    console.log(`üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ ${gateCookies.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–∫–∏ Gate`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–¥–Ω–æ–º—É
    for (const gateCookie of gateCookies) {
      try {
        const isValid = await this.validateCookie(gateCookie);
        if (!isValid) {
          console.log(`‚ùå Cookie –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${gateCookie.userId} –Ω–µ –≤–∞–ª–∏–¥–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
          continue;
        }
        const transactions = await this.fetchAllGateTransactions(gateCookie);
        console.log(
          `üì¶ –ù–∞–π–¥–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Gate –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${gateCookie.userId}`
        );
        if (transactions.length > 0) {
          const { processed, total } = await this.processTransactions(
            gateCookie.userId,
            transactions,
            gateCookie
          );
          console.log(
            `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed} –∏–∑ ${total} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${gateCookie.userId}`
          );
        }
        // –í—ã–∑—ã–≤–∞–µ–º matchingService –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –µ–≥–æ —Ä–∞–±–æ—Ç—ã
        console.log(`‚è≥ –ñ–¥—ë–º, –ø–æ–∫–∞ matchingService –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${gateCookie.userId}`);
        await this.matchingService.processUserTransactions(gateCookie.userId);
        console.log(`‚úÖ matchingService –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${gateCookie.userId}`);
        // –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await this.delay(5 * 60 * 1000);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${gateCookie.userId}:`, error);
      }
    }

    this.updateServiceStats({
      lastRunTime: new Date(),
      isRunning: false,
    });
    this.isRunning = false;
  }

  stop(): void {
    this.isRunning = false;
    this.updateServiceStats({ isRunning: false });
  }
}
