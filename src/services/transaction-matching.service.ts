// src/services/transaction-matching.service.ts
import type { PrismaClient } from "@prisma/client";
import { BaseService } from "./base.service";
import prisma from "@/db";
import type { ServiceMonitor } from "@/utils/service-monitor";

export class TransactionMatchingService extends BaseService {
  private db: PrismaClient;

  constructor(monitor: ServiceMonitor) {
    super("TransactionMatchingService", monitor);
    this.db = prisma;
  }

  private async processUserTransactions(userId: number): Promise<number> {
    let matches = 0;
    // –ë–µ—Ä–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π (90*24*60*60*1000 –º—Å)
    const sinceDate = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ P2P-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const p2pTransactions = await this.db.p2PTransaction.findMany({
        where: {
          userId,
          processed: false,
          completedAt: { gt: sinceDate },
        },
      });
      console.log(
        `Found ${p2pTransactions.length} unprocessed P2P transactions for user ${userId}`
      );

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ Gate-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const gateTransactions = await this.db.gateTransaction.findMany({
        where: {
          userId,
          approvedAt: { not: null },
        },
      });
      console.log(
        `Found ${gateTransactions.length} approved Gate transactions for user ${userId}`
      );

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é P2P-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      for (const p2pTx of p2pTransactions) {
        console.log(`\nProcessing P2P transaction ${p2pTx.id}:`);
        console.log(`  Amount: ${p2pTx.totalRub} RUB`);
        console.log(`  Completed at: ${p2pTx.completedAt}`);

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é Gate-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        for (const gateTx of gateTransactions) {
          if (!gateTx.approvedAt) {
            console.log(
              `Skipping Gate transaction ${gateTx.id} - no approvedAt timestamp`
            );
            continue;
          }

          const timeDiffMinutes = Math.abs(
            (p2pTx.completedAt.getTime() - gateTx.approvedAt.getTime()) /
              (1000 * 60)
          );

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 30 –º–∏–Ω—É—Ç –∏ —Å—É–º–º—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç (—Å –¥–æ–ø—É—Å–∫–æ–º)
          if (
            timeDiffMinutes <= 30 &&
            Math.abs(p2pTx.totalRub - gateTx.amountRub) < 0.01
          ) {
            try {
              // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ TransactionMatch –∏ –æ—Ç–º–µ—á–∞–µ–º P2P-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
              await this.db.$transaction([
                this.db.transactionMatch.create({
                  data: {
                    userId,
                    p2pTxId: p2pTx.id,
                    gateTxId: gateTx.id,
                    isAutoMatched: true,
                    timeDifference: Math.round(timeDiffMinutes),
                  },
                }),
                this.db.p2PTransaction.update({
                  where: { id: p2pTx.id },
                  data: { processed: true },
                }),
              ]);

              matches++;
              console.log(`‚úÖ Successfully matched transactions (P2P ${p2pTx.id} with Gate ${gateTx.id})`);
              break; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π P2P-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –º–∞—Ç—á–∏–Ω–≥–∞
            } catch (error) {
              console.error(`‚ùå Error saving transaction match:`, error);
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–¥–Ω–æ–≥–æ
            }
          }
        }
      }

      return matches;
    } catch (error) {
      console.error(`‚ùå Error processing transactions for user ${userId}:`, error);
      throw error;
    }
  }

  async start(): Promise<void> {
    if (this.isRunning) {
      console.log("üü® Transaction Matching Service is already running");
      return;
    }

    console.log("üü¢ Starting Transaction Matching Service");
    this.isRunning = true;
    this.updateServiceStats({ isRunning: true });

    while (this.isRunning) {
      try {
        console.log("\nüîÑ Starting transaction matching cycle");
        let processedUsers = 0;
        let processedTransactions = 0;
        let errors = 0;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö)
        const users = await this.db.user.findMany({
          select: { id: true, username: true, login: true },
        });

        console.log(`üë• Processing ${users.length} users for transaction matching`);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (const user of users) {
          try {
            console.log(`\nüìù Processing user ${user.id} (${user.login})`);
            const matches = await this.processUserTransactions(user.id);
            processedUsers++;
            processedTransactions += matches;
            console.log(`‚úÖ Completed processing user ${user.id} - found ${matches} matches`);
          } catch (error) {
            console.error(`‚ùå Error processing user ${user.id}:`, error);
            errors++;
          }

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
          await this.delay(1000);
        }

        this.updateServiceStats({
          processedUsers,
          processedTransactions,
          errors,
          lastRunTime: new Date(),
        });

        console.log("\nüìä Cycle Summary:");
        console.log(`   Processed Users: ${processedUsers}`);
        console.log(`   Matched Transactions: ${processedTransactions}`);
        console.log(`   Errors: ${errors}`);

        this.monitor.logStats(this.serviceName);
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –º–∏–Ω—É—Ç–∞)
        await this.delay(60000);
      } catch (error) {
        console.error("‚ùå Critical error in transaction matching cycle:", error);
        this.updateServiceStats({ errors: 1 });
        await this.delay(60000);
      }
    }
  }

  stop(): void {
    console.log("üî¥ Stopping Transaction Matching Service");
    this.isRunning = false;
    this.updateServiceStats({ isRunning: false });
  }
}
