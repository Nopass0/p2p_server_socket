// src/services/transaction-matching.service.ts
import type { PrismaClient } from "@prisma/client";
import { BaseService } from "./base.service";
import prisma from "@/db";
import type { ServiceMonitor } from "@/utils/service-monitor";

export class TransactionMatchingService extends BaseService {
  private db: PrismaClient;

  constructor(monitor: ServiceMonitor) {
    super("TransactionMatchingService", monitor);
    this.db = prisma;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º—ç—Ç—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä.
   */
  public async processUserTransactions(userId: number): Promise<number> {
    let matchesCount = 0;
    // –ë–µ—Ä—ë–º –≤—Å–µ P2P-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π
    const sinceDate = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000);

    const p2pTransactions = await this.db.p2PTransaction.findMany({
      where: {
        userId,
        processed: false,
        completedAt: { gt: sinceDate },
      },
    });
    console.log(
      `Found ${p2pTransactions.length} unprocessed P2P transactions for user ${userId}`
    );

    // –ë–µ—Ä—ë–º –≤—Å–µ "–≤–ª–∞–¥–µ–Ω–∏—è" GateTransactionOwner, –≥–¥–µ matched=false,
    // —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å GateTransaction.approvedAt != null
    // (—Ç.–µ. —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è "–æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è" –Ω–∞ Gate)
    const gateTxOwners = await this.db.gateTransactionOwner.findMany({
      where: {
        userId,
        matched: false,
        gateTransaction: {
          approvedAt: { not: null },
        },
      },
      include: {
        gateTransaction: true, // —á—Ç–æ–±—ã –∏–º–µ—Ç—å —Å–∞–º–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      },
    });
    console.log(
      `Found ${gateTxOwners.length} GateTransaction(s) for user ${userId} (unmatched)`
    );

    for (const p2pTx of p2pTransactions) {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é GateTransaction –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
      //   - —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ <= 30 –º–∏–Ω
      //   - —Å—É–º–º—ã —Ä–∞–≤–Ω—ã (—Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é)
      for (const owner of gateTxOwners) {
        if (!owner.gateTransaction.approvedAt) continue;

        const gateTx = owner.gateTransaction;
        const timeDiffMinutes = Math.abs(
          (p2pTx.completedAt.getTime() - gateTx.approvedAt.getTime()) / (1000 * 60)
        );

        if (
          timeDiffMinutes <= 30 &&
          Math.abs(p2pTx.totalRub - gateTx.amountRub) < 0.01
        ) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º—ç—Ç—á —Å —ç—Ç–∏–º gateTxId
          const existingMatch = await this.db.transactionMatch.findFirst({
            where: { gateTxId: gateTx.id },
            select: { id: true },
          });
          if (existingMatch) {
            console.log(
              `Gate transaction #${gateTx.id} is already matched, skipping...`
            );
            continue;
          }

          // –ï—Å–ª–∏ –º—ç—Ç—á–∞ –µ—â—ë –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
          try {
            await this.db.$transaction([
              // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ TransactionMatch
              this.db.transactionMatch.create({
                data: {
                  userId,
                  p2pTxId: p2pTx.id,
                  gateTxId: gateTx.id,
                  isAutoMatched: true,
                  timeDifference: Math.round(timeDiffMinutes),
                },
              }),
              // –ü–æ–º–µ—á–∞–µ–º P2P-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —á—Ç–æ –æ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
              this.db.p2PTransaction.update({
                where: { id: p2pTx.id },
                data: { processed: true },
              }),
              // –ü–æ–º–µ—á–∞–µ–º GateTransactionOwner, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–º—ç—Ç—á–µ–Ω–∞
              this.db.gateTransactionOwner.update({
                where: {
                  userId_gateTransactionId: {
                    userId,
                    gateTransactionId: gateTx.id,
                  },
                },
                data: { matched: true },
              }),
            ]);
            matchesCount++;
            console.log(
              `‚úÖ Matched P2P #${p2pTx.id} with Gate #${gateTx.id}`
            );
            // –ü–æ—Å–ª–µ —É–¥–∞—á–Ω–æ–≥–æ –º—ç—Ç—á–∞ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –Ω–µ –º–∞—Ç—á–∏—Ç—å p2pTx —Å –¥—Ä—É–≥–∏–º–∏ GateTx
            break;
          } catch (err) {
            console.error(`‚ùå Error saving transaction match:`, err);
          }
        }
      }
    }

    return matchesCount;
  }

  async start(): Promise<void> {
    if (this.isRunning) {
      console.log("üü® Transaction Matching Service is already running");
      return;
    }

    console.log("üü¢ Starting Transaction Matching Service");
    this.isRunning = true;
    this.updateServiceStats({ isRunning: true });

    while (this.isRunning) {
      try {
        console.log("\nüîÑ Starting transaction matching cycle");

        let processedUsers = 0;
        let processedTransactions = 0;
        let errors = 0;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await this.db.user.findMany({
          select: { id: true, username: true, login: true },
        });

        console.log(
          `üë• Processing ${users.length} users for transaction matching`
        );

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (const user of users) {
          try {
            console.log(`\nüìù Processing user ${user.id} (${user.login})`);
            const matched = await this.processUserTransactions(user.id);
            processedUsers++;
            processedTransactions += matched;
            console.log(
              `‚úÖ Completed processing user ${user.id} - found ${matched} matches`
            );
          } catch (error) {
            console.error(`‚ùå Error processing user ${user.id}:`, error);
            errors++;
          }

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
          await this.delay(1000);
        }

        this.updateServiceStats({
          processedUsers,
          processedTransactions,
          errors,
          lastRunTime: new Date(),
        });

        console.log("\nüìä Cycle Summary:");
        console.log(`   Processed Users: ${processedUsers}`);
        console.log(`   Matched Transactions: ${processedTransactions}`);
        console.log(`   Errors: ${errors}`);

        this.monitor.logStats(this.serviceName);
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (1 –º–∏–Ω—É—Ç–∞)
        await this.delay(60000);
      } catch (error) {
        console.error("‚ùå Critical error in transaction matching cycle:", error);
        this.updateServiceStats({ errors: 1 });
        await this.delay(60000);
      }
    }
  }

  stop(): void {
    console.log("üî¥ Stopping Transaction Matching Service");
    this.isRunning = false;
    this.updateServiceStats({ isRunning: false });
  }
}
