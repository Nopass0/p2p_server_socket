import type { PrismaClient } from "@prisma/client";
import { BaseService } from "./base.service";
import prisma from "@/db";
import type { ServiceMonitor } from "@/utils/service-monitor";

export class TransactionMatchingService extends BaseService {
  private db: PrismaClient;

  constructor(monitor: ServiceMonitor) {
    super("TransactionMatchingService", monitor);
    this.db = prisma;
  }

  private async processUserTransactions(userId: number): Promise<number> {
    let matches = 0;
    // –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π
    const ninetyDaysAgo = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000);

    try {
      // –ü–æ–ª—É—á–∞–µ–º P2P-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
      const p2pTransactions = await this.db.p2PTransaction.findMany({
        where: {
          userId,
          processed: false,
          completedAt: { gt: ninetyDaysAgo },
        },
      });
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${p2pTransactions.length} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö P2P —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ Gate —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (approvedAt –Ω–µ null)
      const gateTransactions = await this.db.gateTransaction.findMany({
        where: { approvedAt: { not: null } },
      });
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${gateTransactions.length} –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö Gate —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –º—ç—Ç—á–∏–Ω–≥–∞`);

      for (const p2pTx of p2pTransactions) {
        console.log(`\n–û–±—Ä–∞–±–æ—Ç–∫–∞ P2P —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${p2pTx.id}:`);
        console.log(`  –°—É–º–º–∞: ${p2pTx.totalRub} RUB`);
        console.log(`  –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –≤: ${p2pTx.completedAt}`);

        for (const gateTx of gateTransactions) {
          if (!gateTx.approvedAt) {
            console.log(`–ü—Ä–æ–ø—É—Å–∫ Gate —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${gateTx.id} ‚Äì –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç approvedAt`);
            continue;
          }

          // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
          const timeDiffMinutes = Math.abs(
            (p2pTx.completedAt.getTime() - new Date(gateTx.approvedAt).getTime()) / (1000 * 60)
          );

          // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 30 –º–∏–Ω—É—Ç –∏ —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 0.01)
          if (
            timeDiffMinutes <= 30 &&
            Math.abs(p2pTx.totalRub - gateTx.amountRub) < 0.01
          ) {
            try {
              // –í —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—ë–º –º—ç—Ç—á –∏ –ø–æ–º–µ—á–∞–µ–º P2P —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
              await this.db.$transaction([
                this.db.transactionMatch.create({
                  data: {
                    userId,
                    p2pTxId: p2pTx.id,
                    gateTxId: gateTx.id,
                    isAutoMatched: true,
                    timeDifference: Math.round(timeDiffMinutes),
                  },
                }),
                this.db.p2PTransaction.update({
                  where: { id: p2pTx.id },
                  data: { processed: true },
                }),
              ]);
              matches++;
              console.log(`‚úÖ –ú—ç—Ç—á –Ω–∞–π–¥–µ–Ω: P2P ${p2pTx.id} —Å Gate ${gateTx.id}`);
              // –ï—Å–ª–∏ –º—ç—Ç—á –Ω–∞–π–¥–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π P2P —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
              break;
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º—ç—Ç—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (P2P ${p2pTx.id}, Gate ${gateTx.id}):`, error);
            }
          }
        }
      }

      return matches;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      throw error;
    }
  }

  async start(): Promise<void> {
    if (this.isRunning) {
      console.log("üü® –°–µ—Ä–≤–∏—Å –º—ç—Ç—á–∏–Ω–≥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }
    console.log("üü¢ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Transaction Matching");
    this.isRunning = true;
    this.updateServiceStats({ isRunning: true });

    while (this.isRunning) {
      try {
        console.log("\nüîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º—ç—Ç—á–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
        let processedUsers = 0;
        let processedTransactions = 0;
        let errors = 0;

        const users = await this.db.user.findMany({
          select: { id: true, username: true, login: true },
        });
        console.log(`üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º—ç—Ç—á–∏–Ω–≥–∞`);

        for (const user of users) {
          try {
            console.log(`\nüìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} (${user.login})`);
            const userMatches = await this.processUserTransactions(user.id);
            processedUsers++;
            processedTransactions += userMatches;
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚Äì –Ω–∞–π–¥–µ–Ω–æ ${userMatches} –º—ç—Ç—á–µ–π`);
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
            errors++;
          }
          await this.delay(1000);
        }

        this.updateServiceStats({
          processedUsers,
          processedTransactions,
          errors,
          lastRunTime: new Date(),
        });
        console.log("\nüìä –ò—Ç–æ–≥ —Ü–∏–∫–ª–∞:");
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${processedUsers}`);
        console.log(`   –ú—ç—Ç—á–µ–π –Ω–∞–π–¥–µ–Ω–æ: ${processedTransactions}`);
        console.log(`   –û—à–∏–±–æ–∫: ${errors}`);

        this.monitor.logStats(this.serviceName);
        await this.delay(60000);
      } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º—ç—Ç—á–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:", error);
        this.updateServiceStats({ errors: 1 });
        await this.delay(60000);
      }
    }
  }

  stop(): void {
    console.log("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ Transaction Matching");
    this.isRunning = false;
    this.updateServiceStats({ isRunning: false });
  }
}
