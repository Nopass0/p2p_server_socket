generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminAction {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  target    String?
  metadata  Json?
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model AdminInviteCode {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  isUsed    Boolean   @default(false)
  usedById  Int?
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  @@index([code])
}

model DeviceToken {
  id              Int               @id @default(autoincrement())
  userId          Int
  token           String            @unique
  deviceId        String
  name            String?
  lastUsed        DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  User            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  Screenshot      Screenshot[]
  UserActivityLog UserActivityLog[]
  UserSession     UserSession[]

  @@unique([userId, deviceId])
  @@index([deviceId])
  @@index([token])
}

model GateCookie {
  id          Int      @id @default(autoincrement())
  userId      Int
  cookie      String
  isActive    Boolean  @default(true)
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User     @relation(fields: [userId], references: [id])

  @@unique([userId, cookie])
}

model GateTransaction {
  id               Int                @id @default(autoincrement())
  userId           Int
  transactionId    String             @unique
  paymentMethodId  Int
  wallet           String
  amountRub        Float
  amountUsdt       Float
  totalRub         Float
  totalUsdt        Float
  status           Int
  bankName         String?
  bankLabel        String?
  paymentMethod    String?
  course           Float?
  successCount     Int?
  successRate      Float?
  approvedAt       DateTime?
  expiredAt        DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  attachments      Json?
  bankCode         String?
  traderId         Int?
  traderName       String?
  commissionRate   Float?
  initialBalance   Float?
  User             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  receipts         Receipt[]
  TransactionMatch TransactionMatch[]

  @@index([transactionId])
  @@index([userId, createdAt])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model TelegramTransaction {
  id                        Int      @id @default(autoincrement())
  userId                    Int
  transactionId             Int      @unique
  type                      String
  createdAt                 DateTime
  updatedAt                 DateTime
  amount                    Float
  currency                  String
  status                    String
  gateway                   String
  username                  String?
  tg_id                     String?
  input_addresses           String?
  recipient_wallet_address  String?
  activated_amount          Float?
  photo_url                 String?
  details_for_user          String?
  pair_transaction_currency String?
  is_blocked                Boolean  @default(false)
  network                   String?
  cryptocurrency_exchange   String?
  User                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([transactionId])
  @@index([userId, createdAt])
}

model TronTransaction {
  id           Int        @id @default(autoincrement())
  userId       Int
  walletId     Int
  hash         String     @unique
  fromAddress  String
  toAddress    String
  amount       String
  tokenDecimal Int
  tokenSymbol  String
  tokenName    String
  methodName   String?
  confirmed    Boolean
  timestamp    DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  TronWallet   TronWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([hash])
  @@index([userId, timestamp])
  @@index([walletId])
}

model TronWallet {
  id              Int               @id @default(autoincrement())
  userId          Int               @unique
  address         String
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  TronTransaction TronTransaction[]
  User            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([address])
  @@index([userId])
}

model User {
  id                  Int                   @id @default(autoincrement())
  telegramId          String?               @unique
  login               String                @unique
  password            String
  username            String?
  firstName           String?
  lastName            String?
  photoUrl            String?
  isAdmin             Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  tgAuthToken         String?
  geminiToken         String?
  commissionRate      Float?
  initialBalance      Float?
  middleName          String?
  passportPhoto       String?
  deposit             Float                 @default(0)
  salaryPercentage    Float                 @default(0.5)
  AdminAction         AdminAction[]
  Appeal              Appeal[]
  DeviceToken         DeviceToken[]
  EmployeeComment     EmployeeComment[]
  EmployeeExpense     EmployeeExpense[]
  GateCookie          GateCookie[]
  GateTransaction     GateTransaction[]
  P2PTransaction      P2PTransaction[]
  Screenshot          Screenshot[]
  Session             Session[]
  TelegramTransaction TelegramTransaction[]
  TransactionMatch    TransactionMatch[]
  TronTransaction     TronTransaction[]
  TronWallet          TronWallet?
  UserActivityLog     UserActivityLog[]
  UserSession         UserSession[]
  WorkTime            WorkTime[]

  @@index([telegramId])
  @@index([login])
}

model Screenshot {
  id          Int         @id @default(autoincrement())
  userId      Int
  deviceId    Int
  filePath    String
  fileSize    Int
  width       Int
  height      Int
  createdAt   DateTime    @default(now())
  sentToUser  Boolean     @default(false)
  metadata    Json?
  DeviceToken DeviceToken @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([userId, createdAt])
}

model UserActivityLog {
  id          Int         @id @default(autoincrement())
  userId      Int
  deviceId    Int
  windowName  String
  action      String
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  url         String?
  metadata    Json?
  createdAt   DateTime    @default(now())
  DeviceToken DeviceToken @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([userId, createdAt])
}

model UserSession {
  id          Int         @id @default(autoincrement())
  userId      Int
  deviceId    Int
  startTime   DateTime    @default(now())
  endTime     DateTime?
  duration    Int?
  isActive    Boolean     @default(true)
  metadata    Json?
  DeviceToken DeviceToken @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([userId, startTime])
}

model P2PTransaction {
  id               Int                @id @default(autoincrement())
  userId           Int
  telegramId       String
  status           String
  amount           Float
  totalRub         Float
  price            Float
  buyerName        String
  method           String
  tradeStats       String?
  completedAt      DateTime
  createdAt        DateTime           @default(now())
  processed        Boolean            @default(false)
  User             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  TransactionMatch TransactionMatch[]

  @@unique([userId, telegramId])
  @@index([telegramId])
  @@index([userId])
}

model TransactionMatch {
  id              Int             @id @default(autoincrement())
  userId          Int
  p2pTxId         Int
  gateTxId        Int
  isAutoMatched   Boolean         @default(false)
  timeDifference  Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  GateTransaction GateTransaction @relation(fields: [gateTxId], references: [id], onDelete: Cascade)
  P2PTransaction  P2PTransaction  @relation(fields: [p2pTxId], references: [id], onDelete: Cascade)
  User            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([p2pTxId, gateTxId])
  @@index([userId, createdAt])
  @@index([p2pTxId])
  @@index([gateTxId])
}

model Receipt {
  id              Int             @id @default(autoincrement())
  gateId          Int
  bankLabel       String?
  fileName        String
  fileSize        Int
  filePath        String
  isVerified      Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  GateTransaction GateTransaction @relation(fields: [gateId], references: [id], onDelete: Cascade)

  @@index([gateId])
  @@index([isVerified])
}

model CustomMetric {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  formula     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Expense {
  id     Int      @id @default(autoincrement())
  amount Float
  date   DateTime
  name   String
}

model Appeal {
  id              Int      @id @default(autoincrement())
  userId          Int
  gateId          String
  status          String
  employeeComment String?
  adminComment    String?
  isFinalized     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  User            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([gateId])
  @@index([userId])
}

model EmployeeComment {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id])
}

model EmployeeExpense {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Float
  currency    String
  type        String
  date        DateTime
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model WorkReport {
  id             Int              @id @default(autoincrement())
  workTimeId     Int              @unique
  content        String
  createdAt      DateTime         @default(now())
  WorkTime       WorkTime         @relation(fields: [workTimeId], references: [id])
  WorkReportFile WorkReportFile[]
}

model WorkReportFile {
  id         Int        @id @default(autoincrement())
  reportId   Int
  filename   String
  path       String
  createdAt  DateTime   @default(now())
  WorkReport WorkReport @relation(fields: [reportId], references: [id])

  @@index([reportId])
}

model WorkTime {
  id         Int         @id @default(autoincrement())
  userId     Int
  startTime  DateTime
  endTime    DateTime?
  duration   Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  WorkReport WorkReport?
  User       User        @relation(fields: [userId], references: [id])

  @@index([userId])
}
